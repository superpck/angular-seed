// App container styles
.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

// Navigation wrapper
.nav-wrapper {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 50; /* Higher than content to ensure nav is always on top */
}

// Main content wrapper
.main-content-wrapper {
  flex: 1;
  display: flex;
  flex-direction: column;
  
  &.with-nav {
    padding-top: 56px; /* Account for top nav height */
    
    @media (min-width: 1024px) { /* lg breakpoint */
      padding-left: 250px; /* Account for side nav width */
    }
  }
}

// Content styles
.content {
  flex: 1;
  width: 100%;
  transition: padding-left 0.3s;
  display: flex;
  flex-direction: column;
  position: relative;
  z-index: 10; /* Ensure content is above the side nav when collapsed */
  
  &.with-nav {
    /* Padding is now handled by main-content-wrapper */
  }
  
  &.collapsed-nav {
    @media (min-width: 1024px) {
      /* Adjust the main wrapper instead */
    }
    
    .content-wrapper {
      z-index: 30; /* Ensure content is above the side nav when collapsed */
    }
  }
  
  .content-wrapper {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 0; /* Allow flex child to shrink */
    position: relative;
    
    /* Make sure router-outlet content takes remaining space */
    > :first-child:not(app-footer) {
      flex: 1;
      display: flex;
      flex-direction: column;
      position: relative;
      z-index: 15; /* Ensure router content is above the side nav */
    }
  }
}

// Adjust main wrapper for collapsed nav
.main-content-wrapper.with-nav {
  @media (min-width: 1024px) {
    &:has(.content.collapsed-nav) {
      padding-left: 80px !important; /* Adjust for collapsed nav width */
    }
  }
}

// Alternative approach using class on wrapper
.main-content-wrapper.collapsed-nav {
  @media (min-width: 1024px) {
    padding-left: 80px !important; /* Adjust for collapsed nav width */
  }
}